From a12ef1c49d497dda93fcdf64399d3301bc475fc5 Mon Sep 17 00:00:00 2001
From: Paul-Edouard Sarlin <paul.edouard.sarlin@gmail.com>
Date: Mon, 18 Dec 2023 11:21:54 +0100
Subject: [PATCH 01/32] Windows CI

---
 .github/workflows/build-new.yml    |  2 +-
 package/install-colmap-windows.ps1 | 24 ++++++++++++++++++++++++
 pyproject.toml                     |  5 ++---
 3 files changed, 27 insertions(+), 4 deletions(-)
 create mode 100755 package/install-colmap-windows.ps1

diff --git a/.github/workflows/build-new.yml b/.github/workflows/build-new.yml
index f3c6769..9a22ff3 100644
--- a/.github/workflows/build-new.yml
+++ b/.github/workflows/build-new.yml
@@ -16,7 +16,7 @@ jobs:
     runs-on: ${{ matrix.os }}
     strategy:
       matrix:
-        os: [ubuntu-latest, macos-12, macos-13]
+        os: [ubuntu-latest, macos-12, macos-13, windows-latest]
     steps:
       - uses: actions/checkout@v4
       - name: Build wheels
diff --git a/CMakeLists.txt b/CMakeLists.txt
index cc4b063..d8a2ce2 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -2,6 +2,18 @@ cmake_minimum_required(VERSION 3.10)
 project(${SKBUILD_PROJECT_NAME} VERSION ${SKBUILD_PROJECT_VERSION})
 
 set(CMAKE_CUDA_ARCHITECTURES "native")
+if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
+    # Some fixes for the Glog library.
+    add_definitions("-DGLOG_NO_ABBREVIATED_SEVERITIES")
+    add_definitions("-DGL_GLEXT_PROTOTYPES")
+    add_definitions("-DNOMINMAX")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc")
+    # Enable object level parallel builds in Visual Studio.
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
+endif()
+
+
 find_package(colmap 3.9 REQUIRED)
 
 find_package(Python REQUIRED COMPONENTS Interpreter Development.Module)
@@ -10,6 +22,6 @@ find_package(pybind11 REQUIRED)
 
 pybind11_add_module(pycolmap pycolmap/main.cc)
 target_include_directories(pycolmap PRIVATE ${PROJECT_SOURCE_DIR})
-target_link_libraries(pycolmap PRIVATE colmap::colmap freeimage::FreeImage)
+target_link_libraries(pycolmap PRIVATE colmap::colmap freeimage::FreeImage glog::glog)
 target_compile_definitions(pycolmap PRIVATE VERSION_INFO="${PROJECT_VERSION}")
 install(TARGETS pycolmap LIBRARY DESTINATION .)
diff --git a/package/install-colmap-windows.ps1 b/package/install-colmap-windows.ps1
new file mode 100755
index 0000000..f457fce
--- /dev/null
+++ b/package/install-colmap-windows.ps1
@@ -0,0 +1,32 @@
+$CURRDIR = $PWD
+
+curl.exe -L -o "ninja.zip" "https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-win.zip"
+Expand-Archive -LiteralPath "${CURRDIR}/ninja.zip" -DestinationPath ${CURRDIR}
+$NINJA_PATH = "${CURRDIR}/ninja.exe"
+
+cd ${CURRDIR}
+git clone https://github.com/colmap/colmap.git
+cd colmap
+git checkout c0355417328f3706a30a9265fd52bc7a5aa4cb8c
+
+& "./scripts/shell/enter_vs_dev_shell.ps1"
+
+[System.Collections.ArrayList]$DEPS = Get-Content -Path ".azure-pipelines/build-windows-vcpkg.txt"
+$DEPS.Remove("cgal")
+$DEPS.Remove("qt5-base")
+$DEPS.Add("boost-heap")
+& "${env:VCPKG_INSTALLATION_ROOT}/vcpkg.exe" install --recurse --clean-after-build @DEPS
+& "${env:VCPKG_INSTALLATION_ROOT}/vcpkg.exe" integrate install
+
+mkdir build
+cd build
+cmake .. `
+  -GNinja `
+  -DCMAKE_MAKE_PROGRAM="${NINJA_PATH}" `
+  -DCMAKE_TOOLCHAIN_FILE="${env:VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake" `
+  -DCMAKE_BUILD_TYPE="Release" `
+  -DVCPKG_TARGET_TRIPLET="x64-windows" `
+  -DCUDA_ENABLED="OFF" `
+  -DCGAL_ENABLED="OFF" `
+  -DGUI_ENABLED="OFF"
+& ${NINJA_PATH} install
diff --git a/pycolmap/helpers.h b/pycolmap/helpers.h
index 1ffbaf2..fe2d64e 100644
--- a/pycolmap/helpers.h
+++ b/pycolmap/helpers.h
@@ -65,7 +65,7 @@ inline void UpdateFromDict(py::object& self, py::dict& dict) {
             self.attr(it.first) = base(it.second);
             success_on_base = true;
             break;
-          } catch (const py::error_already_set& ex) {
+          } catch (const py::error_already_set&) {
             continue;  // We anyway throw afterwards
           }
         }
diff --git a/pycolmap/main.cc b/pycolmap/main.cc
index 91a1dff..39206e0 100644
--- a/pycolmap/main.cc
+++ b/pycolmap/main.cc
@@ -17,10 +17,10 @@ namespace py = pybind11;
 
 struct Logging {
   enum class Level {
-    INFO = google::GLOG_INFO,
-    WARNING = google::GLOG_WARNING,
-    ERROR = google::GLOG_ERROR,
-    FATAL = google::GLOG_FATAL,
+    INFO_ = google::GLOG_INFO,
+    WARNING_ = google::GLOG_WARNING,
+    ERROR_ = google::GLOG_ERROR,
+    FATAL_ = google::GLOG_FATAL,
   };
 };  // dummy class
 
@@ -48,10 +48,10 @@ PYBIND11_MODULE(pycolmap, m) {
           .def_static("fatal",
                       [](const std::string& msg) { LOG(FATAL) << msg; });
   py::enum_<Logging::Level>(PyLogging, "Level")
-      .value("INFO", Logging::Level::INFO)
-      .value("WARNING", Logging::Level::WARNING)
-      .value("ERROR", Logging::Level::ERROR)
-      .value("FATAL", Logging::Level::FATAL)
+      .value("INFO", Logging::Level::INFO_)
+      .value("WARNING", Logging::Level::WARNING_)
+      .value("ERROR", Logging::Level::ERROR_)
+      .value("FATAL", Logging::Level::FATAL_)
       .export_values();
   google::InitGoogleLogging("");
   google::InstallFailureSignalHandler();
diff --git a/pycolmap/pipeline/mvs.h b/pycolmap/pipeline/mvs.h
index e694e36..f14e3dc 100644
--- a/pycolmap/pipeline/mvs.h
+++ b/pycolmap/pipeline/mvs.h
@@ -7,11 +7,14 @@
 #include "colmap/feature/sift.h"
 #include "colmap/mvs/fusion.h"
 #include "colmap/mvs/meshing.h"
-#include "colmap/mvs/patch_match.h"
 #include "colmap/scene/reconstruction.h"
 #include "colmap/sensor/models.h"
 #include "colmap/util/misc.h"
 
+#ifdef COLMAP_CUDA_ENABLED
+#include "colmap/mvs/patch_match.h"
+#endif  // COLMAP_CUDA_ENABLED
+
 #include "pycolmap/helpers.h"
 #include "pycolmap/log_exceptions.h"
 
@@ -24,17 +27,12 @@ using namespace colmap;
 using namespace pybind11::literals;
 namespace py = pybind11;
 
+#ifdef COLMAP_CUDA_ENABLED
 void PatchMatchStereo(py::object workspace_path_,
                       std::string workspace_format,
                       std::string pmvs_option_name,
                       mvs::PatchMatchOptions options,
                       std::string config_path) {
-#ifndef COLMAP_CUDA_ENABLED
-  THROW_EXCEPTION(std::runtime_error,
-                  "Dense stereo reconstruction requires CUDA, which is not "
-                  "available on the system.");
-  return;
-#endif  // COLMAP_CUDA_ENABLED
   std::string workspace_path = py::str(workspace_path_).cast<std::string>();
   THROW_CHECK_DIR_EXISTS(workspace_path);
 
@@ -51,6 +49,7 @@ void PatchMatchStereo(py::object workspace_path_,
   controller.Start();
   PyWait(&controller);
 }
+#endif  // COLMAP_CUDA_ENABLED
 
 Reconstruction StereoFusion(py::object output_path_,
                             py::object workspace_path_,
@@ -106,6 +105,7 @@ Reconstruction StereoFusion(py::object output_path_,
 }
 
 void BindMVS(py::module& m) {
+#ifdef COLMAP_CUDA_ENABLED
   using PMOpts = mvs::PatchMatchOptions;
   auto PyPatchMatchOptions =
       py::class_<PMOpts>(m, "PatchMatchOptions")
@@ -195,6 +195,16 @@ void BindMVS(py::module& m) {
   make_dataclass(PyPatchMatchOptions);
   auto patch_match_options = PyPatchMatchOptions().cast<PMOpts>();
 
+  m.def("patch_match_stereo",
+        &PatchMatchStereo,
+        "workspace_path"_a,
+        "workspace_format"_a = "COLMAP",
+        "pmvs_option_name"_a = "option-all",
+        "options"_a = patch_match_options,
+        "config_path"_a = "",
+        "Runs Patch-Match-Stereo (requires CUDA)");
+#endif  // COLMAP_CUDA_ENABLED
+
   using SFOpts = mvs::StereoFusionOptions;
   auto PyStereoFusionOptions =
       py::class_<SFOpts>(m, "StereoFusionOptions")
@@ -249,15 +259,6 @@ void BindMVS(py::module& m) {
   make_dataclass(PyStereoFusionOptions);
   auto stereo_fusion_options = PyStereoFusionOptions().cast<SFOpts>();
 
-  m.def("patch_match_stereo",
-        &PatchMatchStereo,
-        "workspace_path"_a,
-        "workspace_format"_a = "COLMAP",
-        "pmvs_option_name"_a = "option-all",
-        "options"_a = patch_match_options,
-        "config_path"_a = "",
-        "Runs Patch-Match-Stereo (requires CUDA)");
-
   m.def("stereo_fusion",
         &StereoFusion,
         "output_path"_a,
diff --git a/pycolmap/scene/image.h b/pycolmap/scene/image.h
index 3c2d830..908497f 100644
--- a/pycolmap/scene/image.h
+++ b/pycolmap/scene/image.h
@@ -113,7 +113,7 @@ void BindImage(py::module& m) {
       .def_property(
           "points2D",
           py::overload_cast<>(&Image::Points2D),
-          [](Image& self, const std::vector<class Point2D>& points2D) {
+          [](Image& self, const std::vector<struct Point2D>& points2D) {
             THROW_CUSTOM_CHECK(!points2D.empty(), std::invalid_argument);
             self.SetPoints2D(points2D);
           },
@@ -164,7 +164,7 @@ void BindImage(py::module& m) {
            "Extract the viewing direction of the image.")
       .def(
           "set_up",
-          [](Image& self, const class Camera& camera) {
+          [](Image& self, const struct Camera& camera) {
             THROW_CHECK_EQ(self.CameraId(), camera.camera_id);
             self.SetUp(camera);
           },
diff --git a/pycolmap/scene/point2D.h b/pycolmap/scene/point2D.h
index dae7b19..074bd70 100644
--- a/pycolmap/scene/point2D.h
+++ b/pycolmap/scene/point2D.h
@@ -18,7 +18,7 @@ using namespace pybind11::literals;
 namespace py = pybind11;
 
 using vector_Point2D =
-    std::vector<class Point2D, Eigen::aligned_allocator<Point2D>>;
+    std::vector<struct Point2D, Eigen::aligned_allocator<Point2D>>;
 PYBIND11_MAKE_OPAQUE(vector_Point2D);
 
 std::string PrintPoint2D(const Point2D& p2D) {
diff --git a/pycolmap/scene/reconstruction.h b/pycolmap/scene/reconstruction.h
index c8b4792..0124e50 100644
--- a/pycolmap/scene/reconstruction.h
+++ b/pycolmap/scene/reconstruction.h
@@ -127,7 +127,7 @@ void BindReconstruction(py::module& m) {
       .def("exists_image_pair", &Reconstruction::ExistsImagePair)
       .def(
           "add_camera",
-          [](Reconstruction& self, const class Camera& camera) {
+          [](Reconstruction& self, const struct Camera& camera) {
             THROW_CHECK(!self.ExistsCamera(camera.camera_id));
             THROW_CHECK(camera.VerifyParams());
             self.AddCamera(camera);
diff --git a/pyproject.toml b/pyproject.toml
index 4467d12..80f0a40 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -28,14 +28,18 @@ wheel.expand-macos-universal-tags = true
 
 
 [tool.cibuildwheel]
-build = "cp3{8,9,10,11}-{macosx,manylinux}*"
+build = "cp3{8,9,10,11}-{macosx,manylinux,win}*"
 archs = ["auto64"]
 test-command = "python -c 'import pycolmap; print(pycolmap.__version__)'"
 
 [tool.cibuildwheel.linux]
-before-all = "./package/install-colmap-centos.sh"
+before-all = "{project}/package/install-colmap-centos.sh"
 config-settings = "cmake.define.EIGEN3_INCLUDE_DIRS=eigen"
 
 [tool.cibuildwheel.macos]
-before-all = "./package/install-colmap-macos.sh"
+before-all = "{project}/package/install-colmap-macos.sh"
 config-settings = { "cmake.define.BOOSTROOT" = "boost_install", "cmake.define.Boost_NO_SYSTEM_PATHS" = "ON" }
+
+[tool.cibuildwheel.windows]
+before-all = "powershell -File {project}/package/install-colmap-windows.ps1"
+environment = { CMAKE_TOOLCHAIN_FILE="$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake", VCPKG_TARGET_TRIPLET="x64-windows" }
