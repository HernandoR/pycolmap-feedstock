diff --git a/reconstruction/camera.cc b/reconstruction/camera.cc
index 8c91fbe..662842e 100644
--- a/reconstruction/camera.cc
+++ b/reconstruction/camera.cc
@@ -30,13 +30,21 @@ std::string PrintCamera(const colmap::Camera& camera) {
     return ss.str();
 }
 
-void init_camera(py::module& m) {
+class CameraMapWrapper {
+public:
     using CameraMap = EIGEN_STL_UMAP(colmap::camera_t, colmap::Camera);
+    CameraMap map;
+};
+
+void init_camera(py::module& m) {
+    // Bind the wrapper class instead of the map type directly
+    py::class_<CameraMapWrapper>(m, "MapCameraIdCamera")
+        .def(py::init<>())  // constructor
+        .def("__repr__", [](const CameraMapWrapper& self) {
 
-    py::bind_map<CameraMap>(m, "MapCameraIdCamera").def("__repr__", [](const CameraMap& self) {
         std::string repr = "{";
         bool is_first = true;
-        for (auto& pair : self) {
+        for (auto& pair : self.map) {
             if (!is_first) {
                 repr += ", ";
             }
diff --git a/reconstruction/image.cc b/reconstruction/image.cc
index 7c00fae..57dc396 100644
--- a/reconstruction/image.cc
+++ b/reconstruction/image.cc
@@ -31,21 +31,28 @@ std::string PrintImage(const colmap::Image& image) {
     return ss.str();
 }
 
-void init_image(py::module& m) {
+class ImageMapWrapper {
+public:
     using ImageMap = EIGEN_STL_UMAP(colmap::image_t, colmap::Image);
-    py::bind_map<ImageMap>(m, "MapImageIdImage").def("__repr__", [](const ImageMap& self) {
-        std::string repr = "{";
-        bool is_first = true;
-        for (auto& pair : self) {
-            if (!is_first) {
-                repr += ", ";
+    ImageMap map;
+};
+
+void init_image(py::module& m) {
+    py::class_<ImageMapWrapper>(m, "MapImageIdImage")
+        .def(py::init<>())  // constructor
+        .def("__repr__", [](const ImageMapWrapper& self) {
+            std::string repr = "{";
+            bool is_first = true;
+            for (auto& pair : self.map) {  // Accessing the map field of ImageMapWrapper
+                if (!is_first) {
+                    repr += ", ";
+                }
+                is_first = false;
+                repr += std::to_string(pair.first) + ": " + PrintImage(pair.second);
             }
-            is_first = false;
-            repr += std::to_string(pair.first) + ": " + PrintImage(pair.second);
-        }
-        repr += "}";
-        return repr;
-    });
+            repr += "}";
+            return repr;
+        });
 
     py::class_<colmap::Image, std::shared_ptr<colmap::Image>>(m, "Image")
         .def(py::init<>())
diff --git a/reconstruction/point3D.cc b/reconstruction/point3D.cc
index d4cc396..c2f6e51 100644
--- a/reconstruction/point3D.cc
+++ b/reconstruction/point3D.cc
@@ -28,22 +28,28 @@ std::string PrintPoint3D(const colmap::Point3D& point3D) {
     return ss.str();
 }
 
-void init_point3D(py::module& m) {
+class Point3DMapWrapper {
+public:
     using Point3DMap = EIGEN_STL_UMAP(colmap::point3D_t, colmap::Point3D);
+    Point3DMap map;
+};
 
-    py::bind_map<Point3DMap>(m, "MapPoint3DIdPoint3D").def("__repr__", [](const Point3DMap& self) {
-        std::string repr = "{";
-        bool is_first = true;
-        for (auto& pair : self) {
-            if (!is_first) {
-                repr += ", ";
+void init_point3D(py::module& m) {
+    py::class_<Point3DMapWrapper>(m, "MapPoint3DIdPoint3D")
+        .def(py::init<>())  // constructor
+        .def("__repr__", [](const Point3DMapWrapper& self) {
+            std::string repr = "{";
+            bool is_first = true;
+            for (auto& pair : self.map) {  // Accessing the map field of Point3DMapWrapper
+                if (!is_first) {
+                    repr += ", ";
+                }
+                is_first = false;
+                repr += std::to_string(pair.first) + ": " + PrintPoint3D(pair.second);
             }
-            is_first = false;
-            repr += std::to_string(pair.first) + ": " + PrintPoint3D(pair.second);
-        }
-        repr += "}";
-        return repr;
-    });
+            repr += "}";
+            return repr;
+        });
 
     py::class_<colmap::Point3D, std::shared_ptr<colmap::Point3D>>(m, "Point3D")
         .def(py::init<>())
